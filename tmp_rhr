import fs from 'node:fs/promises';
import path from 'node:path';
import { RhrEffect, RhrEffectSchema } from '../types.js';
import { log, logError } from '../lib/log.js';

const TIMESTAMP = process.env.TIMESTAMP || new Date().toISOString().split('T')[0]!;

/**
 * Curated resting heart rate effect data
 * Based on meta-analyses and large cohort studies
 */
const RHR_EFFECT_DATA: RhrEffect = {
  neutral_bpm: 70,
  hr_per_10bpm: {
    low: 1.08,
    mid: 1.10,
    high: 1.12
  },
  bands: [
    { min: 0, max: 59, rr_allcause: 0.90 },   // Lower risk for athletic heart rates
    { min: 60, max: 69, rr_allcause: 1.00 },  // Reference group
    { min: 70, max: 79, rr_allcause: 1.10 },  // Slightly elevated risk
    { min: 80, max: 89, rr_allcause: 1.21 },  // Moderately elevated risk
    { min: 90, max: 300, rr_allcause: 1.33 }  // High risk
  ],
  citations: [
    "Meta-analysis: Resting heart rate and all-cause and cardiovascular mortality: meta-analysis of prospective studies (DOI: 10.1136/heartjnl-2013-304498)",
    "Copenhagen City Heart Study: Resting heart rate and mortality (DOI: 10.1136/hrt.2012.307542)",
    "Framingham Heart Study: Resting heart rate as a low tech predictor of coronary events (DOI: 10.1016/j.amjmed.2009.12.015)"
  ],
  retrieved_at: new Date().toISOString().split('T')[0]!,
  notes: "Effect sizes based on meta-analyses of prospective cohort studies. Adjusted for age, sex, and smoking where available. Conservative estimates for educational use only."
};

export async function runRhrEffectPipeline(): Promise<void> {
  try {
    log('Starting resting heart rate effects data pipeline...');
    
    // Validate the curated data
    const validatedData = RhrEffectSchema.parse(RHR_EFFECT_DATA);
    log('✓ RHR effects data validation passed');
    
    // Create directories
    const processedDir = path.join(process.cwd(), 'data', 'processed', TIMESTAMP);
    const latestDir = path.join(process.cwd(), 'data', 'latest');
    
    await fs.mkdir(processedDir, { recursive: true });
    await fs.mkdir(latestDir, { recursive: true });
    
    // Write processed data
    const processedPath = path.join(processedDir, 'rhr_effect.json');
    await fs.writeFile(processedPath, JSON.stringify(validatedData, null, 2));
    log(`Written: ${processedPath}`);
    
    // Write to latest
    const latestPath = path.join(latestDir, 'rhr_effect.json');
    await fs.writeFile(latestPath, JSON.stringify(validatedData, null, 2));
    log(`Written: ${latestPath}`);
    
    log('✓ RHR effects pipeline completed successfully');
    
  } catch (error) {
    logError('RHR effects pipeline failed', error);
    throw error;
  }
}

// Run if called directly
runRhrEffectPipeline().catch(console.error);
